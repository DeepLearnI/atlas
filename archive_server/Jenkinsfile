def build_number = env.BUILD_URL
def customMetrics = [:]
def customMetricsMap = [:]

properties([pipelineTriggers([githubPush()])])

pipeline{
  agent {
    label 'ci-pipeline-jenkins-slave'
  }
  stages {
    stage('Preparation') {
      steps {
        container("python3") {
          git branch: 'master', credentialsId: 'dessa-devops-trail-rsa', url: 'git@github.com:DeepLearnI/archive_server.git'
        }
      }
    }
    stage('Install Requirements') {
      steps {
        container("python3") {
          sh 'pip install -r requirements.txt'
        }
      }
    }
    stage('Configure Credentials'){
      steps {
        container('python3') {
          sh 'docker login $NEXUS_DOCKER_REGISTRY -u $NEXUS_USER -p $NEXUS_PASSWORD'
          sh 'docker login $NEXUS_DOCKER_STAGING -u $NEXUS_USER -p $NEXUS_PASSWORD'
        }
      }
    }
    stage('Build Docker Images to Staging') {
      steps {
        container("python3") {
          sh 'NEXUS_DOCKER_REGISTRY=${NEXUS_DOCKER_STAGING}/foundations ./build_image.sh'
        }
      }
    }
    stage('Push Docker Images to Staging') {
      steps {
        container("python3") {
          sh 'NEXUS_DOCKER_REGISTRY=${NEXUS_DOCKER_STAGING}/foundations ./push_image.sh'
        }
      }
    }
    stage('Run Tests') {
      steps {
        container("python3") {
          sh 'echo NO TEST FOUND'
        }
      }
    }
    stage('Trigger Build Artifacts for Foundations Pipeline') {
      steps {
        script {
          echo "Attempting to trigger pipeline for building Atlas CE Artifacts with version of master"
          build job: "build-artifacts-foundations", wait: false, parameters: [
            [$class: 'StringParameterValue', name: 'f9s_commit_hash', value: "master"]
          ]
        }
      }
    }
  }
  post {
    always {
      script {
            customMetricsMap["jenkins_data"] = customMetrics
      }
      influxDbPublisher selectedTarget: 'foundations', customPrefix: 'archive-server', customProjectName: 'archive-server', jenkinsEnvParameterField: '', jenkinsEnvParameterTag: '', customDataMap: customMetricsMap
    }
    failure {
        script {
            def output_logs = String.join('\n', currentBuild.rawBuild.getLog(200))
            def attachments = [
                [
                    pretext: '@channel Build failed for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.',
                    text: output_logs,
                    fallback: '@channel Build failed for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.',
                    color: '#FF0000'
                ]
            ]
            slackSend(channel: '#f9s-builds', attachments: attachments)
        }
    }
    success {
        slackSend color: '#00FF00', message: 'Build succeeded for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.'
    }
  }
}