def build_number = env.BUILD_URL
def customMetrics = [:]
def customMetricsMap = [:]

pipeline{
  agent {
    label 'ci-pipeline-jenkins-slave'
  }
  stages {
    stage('Preparation') {
      steps {
        container("python3") {
          git branch: 'el-local-docker-scheduler-plugin', credentialsId: 'dessa-devops-trail-rsa', url: 'git@github.com:DeepLearnI/foundations.git'
        }
      }
    }
    stage('Foundations Install Test Requirements') {
      steps {
        container("python3") {
          sh "./ci_install_requirements.sh"
        }
      }
    }
    stage('Build Foundations Wheels') {
      steps {
        container("python3") {
          sh "./devops/build_scripts/build_all_dist.sh"
        }
      }
    }
    stage('Upload Wheels to Staging PyPi') {
      steps {
        container("python3") {
          sh "./devops/build_scripts/upload_modules_to_artifactory.sh $NEXUS_PYPI_STAGING"
        }
      }
    }
    stage('Build Worker Images For Staging') {
      steps {
        container("python3") {
          sh 'python -m pip install ./dist/*.whl'
          sh 'export NEXUS_DOCKER_REGISTRY_STAGING=docker-staging.shehanigans.net'
          sh 'docker login $NEXUS_DOCKER_REGISTRY_STAGING -u $NEXUS_USER -p $NEXUS_PASSWORD'
          sh 'RELEASED=True && NEXUS_DOCKER_REGISTRY=$NEXUS_DOCKER_REGISTRY_STAGING && ./devops/build_scripts/workers/build_worker_images.sh'
        }
      }
    }
    stage('Push Images To Staging') {
      steps {
        container("python3") {
          sh 'NEXUS_DOCKER_REGISTRY=$NEXUS_DOCKER_REGISTRY_STAGING && ./devops/build_scripts/workers/push_worker_images.sh'
        }
      }
    }
    stage('Build Tracker Image') {
      steps {
        container("python3") {
          sh "docker pull redis:5 "
          sh "docker tag redis:5 $NEXUS_DOCKER_REGISTRY_STAGING/tracker:5"
          sh "docker tag $NEXUS_DOCKER_REGISTRY_STAGING/tracker:5 $NEXUS_DOCKER_REGISTRY_STAGING/tracker:latest"
        }
      }
    }
    stage('Push Tracker Image') {
      steps {
        container("python3") {
          sh "docker push $NEXUS_DOCKER_REGISTRY_STAGING/tracker:5"
          sh "docker push $NEXUS_DOCKER_REGISTRY_STAGING/tracker:latest"
        }
      }
    }
    stage('Trigger Atlas CE Build Pipeline') {
      steps {
        script {
          echo "Triggering job for building Atlas CE Artifacts"
          build job: "build-artifacts-atlas-ce", wait: false
        }
      }
    }
    stage('Trigger Orbit Team Build Pipeline') {
      steps {
        script {
          echo "Triggering job for building Orbit Team Artifacts"
          build job: "build-artifacts-orbit-team", wait: false
        }
      }
    }
    stage("Calculate Recovery Metrics") {
      steps {
        script {
          def last_build = currentBuild.getPreviousBuild()
          def last_failed_build
          def current_time = System.currentTimeMillis()
          
          while(last_build != null && last_build.result == "FAILURE") {
            last_failed_build = last_build
            last_build = last_build.getPreviousBuild()
          }
          
          if(last_failed_build != null) {
            time_to_recovery = current_time - last_failed_build.getTimeInMillis() 
            customMetrics["time_to_recovery"] = time_to_recovery
          }
        }
      }
    }
  }
  post {
    always {
      script {
        customMetricsMap["jenkins_data"] = customMetrics
      }
      influxDbPublisher selectedTarget: 'foundations', customPrefix: 'foundations', customProjectName: 'foundations', jenkinsEnvParameterField: '', jenkinsEnvParameterTag: '', customDataMap: customMetricsMap
    }
    failure {
      script {
        def output_logs = String.join('\n', currentBuild.rawBuild.getLog(200))
        def attachments = [
            [
                pretext: '@channel Build failed for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.',
                text: output_logs,
                fallback: '@channel Build failed for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.',
                color: '#FF0000'
            ]
        ]

        slackSend(channel: '#f9s-builds', attachments: attachments)
      }
    }
    success {
      slackSend color: '#00FF00', message: 'Build succeeded for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.'
    }
  }
}