def build_number = env.BUILD_URL
def customMetrics = [:]
def customMetricsMap = [:]

pipeline{
  agent {
    label 'ci-pipeline-jenkins-slave'
  }
  stages {
    stage('Preparation') {
      steps {
        container("python3") {
          dir('f9s') {
            git branch: 'master', credentialsId: 'dessa-devops-trail-rsa', url: 'git@github.com:DeepLearnI/foundations.git'
          }
        }
      }
    }
    stage('Foundations Install Requirements') {
      steps {
        container("python3") {
          dir('f9s') {
            sh "./ci_install_requirements.sh"
          }
        }
      }
    }
    stage('Build Atlas CE Wheels') {
      steps {
        container("python3") {
          dir('f9s') {
            sh "./devops/build_scripts/build_ce_dist.sh"
          }
        }
      }
    }
    stage('Build Atlas GUI and Rest API Images'){
      steps {
        container("python3"){
          dir('f9s') {
            sh 'docker login $NEXUS_DOCKER_STAGING -u $NEXUS_USER -p $NEXUS_PASSWORD'
            sh "NEXUS_DOCKER_REGISTRY=$NEXUS_DOCKER_STAGING/atlas-ce-dev ./devops/build_scripts/gui_and_rest_apis/build_gui_ce.sh"
          }
        }
      }
    }
    stage('Push Atlas GUI and Rest API Images'){
      steps {
        container("python3"){
          dir('f9s') {
            sh "NEXUS_DOCKER_REGISTRY=$NEXUS_DOCKER_STAGING/atlas-ce-dev ./devops/build_scripts/gui_and_rest_apis/push_gui_atlas_ce_images.sh"
          }
        }
      }
    }
    stage('Build Atlas Tensorboard Server and Rest API Images'){
      steps {
        container("python3"){
          dir('f9s') {
            sh "NEXUS_DOCKER_REGISTRY=$NEXUS_DOCKER_STAGING/atlas-ce-dev ./tensorboard/docker/tensorboard_rest_api/build_image.sh"
            sh "NEXUS_DOCKER_REGISTRY=$NEXUS_DOCKER_STAGING/atlas-ce-dev ./tensorboard/docker/tensorboard_server/build_image.sh"
          }
        }
      }
    }
    stage('Push Atlas Tensorboard Server and Rest API Images'){
      steps {
        container("python3"){
          dir('f9s') {
            sh "NEXUS_DOCKER_REGISTRY=$NEXUS_DOCKER_STAGING/atlas-ce-dev ./tensorboard/docker/tensorboard_rest_api/push_image.sh"
            sh "NEXUS_DOCKER_REGISTRY=$NEXUS_DOCKER_STAGING/atlas-ce-dev ./tensorboard/docker/tensorboard_server/push_image.sh"
          }
        }
      }
    }
    stage('Trigger Atlas CE Build Pipeline') {
      steps {
        container("python3"){
          dir('f9s') {
            script {
              echo "Triggering job for building Atlas CE Artifacts"
              sh('export version=$(python get_version.py)')
              println('Attempting to trigger pipeline with version of ${version}')
              build job: "build-installer-atlas-ce", wait: false, parameters: [
                [$class: 'StringParameterValue', name: 'atlas_ce_rest_api', value: 'docker-staging.shehanigans.net/atlas-ce-dev/foundations-rest-api:${version}'],
                [$class: 'StringParameterValue', name: 'atlas_ce_gui', value: 'docker-staging.shehanigans.net/atlas-ce-dev/foundations-gui:${version}'],
                [$class: 'StringParameterValue', name: 'atlas_ce_tracker', value: 'docker-staging.shehanigans.net/atlas-ce-dev/tracker:${version}'],
                [$class: 'StringParameterValue', name: 'scheduler', value: 'docker-staging.shehanigans.net/atlas-ce-dev/scheduler:latest'],
                [$class: 'StringParameterValue', name: 'atlas_ce_worker', value: 'docker-staging.shehanigans.net/atlas-ce-dev/worker:${version}'],
                [$class: 'StringParameterValue', name: 'archive_server', value: 'docker-staging.shehanigans.net/atlas-ce-dev/archive_server:latest'],
                [$class: 'StringParameterValue', name: 'tensorboard_server', value: 'docker-staging.shehanigans.net/atlas-ce-dev/tensorboard-server:${version}'],
                [$class: 'StringParameterValue', name: 'tensorboard_rest_api', value: 'docker-staging.shehanigans.net/atlas-ce-dev/tensorboard-rest-api:${version}'],
                [$class: 'StringParameterValue', name: 'atlas_server', value: '0.2.4.dev2'],
                [$class: 'StringParameterValue', name: 'foundations_atlas_ce_pi_py', value: '${version}'],
                [$class: 'StringParameterValue', name: 'ATLAS_CE_VERSION', value: 'test_to_release']
              ]
            }
          }
        }
      }
    }
    stage("Calculate Recovery Metrics") {
      steps {
        script {
          def last_build = currentBuild.getPreviousBuild()
          def last_failed_build
          def current_time = System.currentTimeMillis()

          while(last_build != null && last_build.result == "FAILURE") {
            last_failed_build = last_build
            last_build = last_build.getPreviousBuild()
          }

          if(last_failed_build != null) {
            time_to_recovery = current_time - last_failed_build.getTimeInMillis()
            customMetrics["time_to_recovery"] = time_to_recovery
          }
        }
      }
    }
  }
  // post {
  //   always {
  //     script {
  //           customMetricsMap["jenkins_data"] = customMetrics
  //     }
  //     influxDbPublisher selectedTarget: 'foundations', customPrefix: 'foundations', customProjectName: 'foundations', jenkinsEnvParameterField: '', jenkinsEnvParameterTag: '', customDataMap: customMetricsMap
  //   }
  //   failure {
  //       script {
  //           def output_logs = String.join('\n', currentBuild.rawBuild.getLog(200))
  //           def attachments = [
  //               [
  //                   pretext: '@channel Build failed for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.',
  //                   text: output_logs,
  //                   fallback: '@channel Build failed for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.',
  //                   color: '#FF0000'
  //               ]
  //           ]
  //           slackSend(channel: '#f9s-builds', attachments: attachments)
  //       }
  //   }
  //   success {
  //       slackSend color: '#00FF00', message: 'Build succeeded for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.'
  //   }
  // }
}
