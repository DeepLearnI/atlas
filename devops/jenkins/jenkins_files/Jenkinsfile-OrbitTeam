def build_number = env.BUILD_URL
def customMetrics = [:]
def customMetricsMap = [:]

pipeline{
  agent {
    label 'ci-pipeline-jenkins-slave'
  }
  stages {
    stage('Preparation') {
        steps {
            container("python3") {
              git branch: 'master', credentialsId: 'dessa-devops-trail-rsa', url: 'git@github.com:DeepLearnI/foundations.git'
              sh "git checkout ${params.f9s_commit_hash}"
            }
        }
    }
    stage('Foundations Install Requirements') {
      steps {
        container("python3") {
          sh "./ci_install_requirements.sh"
        }
      }
    }
    stage('Build Orbit Team Wheels'){
      steps {
        container("python3"){
          sh "./devops/build_scripts/build_orbit_team_dist.sh"
        }
      }
    }
    stage('Build Orbit Team GUI and Rest API Images'){
      steps {
        container("python3"){
          sh 'docker login $NEXUS_DOCKER_STAGING -u $NEXUS_USER -p $NEXUS_PASSWORD'
          sh "NEXUS_DOCKER_REGISTRY=$NEXUS_DOCKER_STAGING PACKAGE_NAME=orbit-team ./devops/build_scripts/gui_and_rest_apis/build_gui_orbit_team.sh"
        }
      }
    }
    stage('Push Orbit Team GUI and Rest API Images to Staging'){
      steps {
        container("python3"){
          sh "NEXUS_DOCKER_REGISTRY=$NEXUS_DOCKER_STAGING PACKAGE_NAME=orbit-team ./devops/build_scripts/gui_and_rest_apis/push_gui_orbit_team_images.sh"
        }
      }
    }
    stage('Trigger Orbit Team Build Pipeline') {
      steps {
        container("python3"){
          script {
            version = sh(script: 'python get_version.py', returnStdout: true).trim()
            println("Attempting to trigger pipeline with version of ${version}")
            build job: "build-installer-orbit-team", wait: false, parameters: [
              [$class: 'StringParameterValue', name: 'atlas_rest_api', value: "docker-staging.shehanigans.net/atlas-ce/foundations-rest-api:${version}"],
              [$class: 'StringParameterValue', name: 'archive_server', value: "docker-staging.shehanigans.net/foundations/archive_server:latest"],
              [$class: 'StringParameterValue', name: 'auth_proxy', value: "docker-staging.shehanigans.net/atlas-ce/auth-proxy:latest"],
              [$class: 'StringParameterValue', name: 'auth_server', value: "docker-staging.shehanigans.net/foundations/auth-server:latest"],
              [$class: 'StringParameterValue', name: 'orbit_gui', value: "docker-staging.shehanigans.net/orbit-team/orbit-gui:${version}"],
              [$class: 'StringParameterValue', name: 'orbit_rest_api', value: "docker-staging.shehanigans.net/orbit-team/foundations-orbit-rest-api:${version}"],
              [$class: 'StringParameterValue', name: 'scheduler', value: "docker-staging.shehanigans.net/foundations/scheduler:latest"],
              [$class: 'StringParameterValue', name: 'tracker', value: "docker-staging.shehanigans.net/foundations/tracker:latest"],
              [$class: 'StringParameterValue', name: 'worker', value: "docker-staging.shehanigans.net/orbit-team/worker:${version}"],
              [$class: 'StringParameterValue', name: 'orbit_server', value: 'latest'],
              [$class: 'StringParameterValue', name: 'foundations_orbit_ce_pi_py', value: version],
              [$class: 'StringParameterValue', name: 'ORBIT_TEAM_VERSION', value: version],
              [$class: 'StringParameterValue', name: 'f9s_commit_hash', value: params.f9s_commit_hash]
            ]
          }
        }
      }
    }
    stage("Calculate Recovery Metrics") {
      steps {
        script {
          def last_build = currentBuild.getPreviousBuild()
          def last_failed_build
          def current_time = System.currentTimeMillis()
          
          while(last_build != null && last_build.result == "FAILURE") {
            last_failed_build = last_build
            last_build = last_build.getPreviousBuild()
          }
          
          if(last_failed_build != null) {
            time_to_recovery = current_time - last_failed_build.getTimeInMillis() 
            customMetrics["time_to_recovery"] = time_to_recovery
          }
        }
      }
    }
  }
  post {
    always {
      script {
            customMetricsMap["jenkins_data"] = customMetrics
      }
      influxDbPublisher selectedTarget: 'foundations', customPrefix: 'foundations', customProjectName: 'foundations', jenkinsEnvParameterField: '', jenkinsEnvParameterTag: '', customDataMap: customMetricsMap
    }
    failure {
        script {
            def output_logs = String.join('\n', currentBuild.rawBuild.getLog(200))
            def attachments = [
                [
                    pretext: '@channel Build failed for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.',
                    text: output_logs,
                    fallback: '@channel Build failed for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.',
                    color: '#FF0000'
                ]
            ]
            slackSend(channel: '#f9s-builds', attachments: attachments)
        }
    }
    success {
        slackSend color: '#00FF00', message: 'Build succeeded for `' + env.JOB_NAME + '` please visit ' + env.BUILD_URL + ' for more details.'
    }
  }
}
